// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package conciergef

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConciergefClient is the client API for Conciergef service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConciergefClient interface {
	CallTest(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Hi, error)
	CallSearch(ctx context.Context, in *Search, opts ...grpc.CallOption) (*Result, error)
}

type conciergefClient struct {
	cc grpc.ClientConnInterface
}

func NewConciergefClient(cc grpc.ClientConnInterface) ConciergefClient {
	return &conciergefClient{cc}
}

func (c *conciergefClient) CallTest(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*Hi, error) {
	out := new(Hi)
	err := c.cc.Invoke(ctx, "/Conciergef/CallTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conciergefClient) CallSearch(ctx context.Context, in *Search, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Conciergef/CallSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConciergefServer is the server API for Conciergef service.
// All implementations must embed UnimplementedConciergefServer
// for forward compatibility
type ConciergefServer interface {
	CallTest(context.Context, *Hello) (*Hi, error)
	CallSearch(context.Context, *Search) (*Result, error)
	mustEmbedUnimplementedConciergefServer()
}

// UnimplementedConciergefServer must be embedded to have forward compatible implementations.
type UnimplementedConciergefServer struct {
}

func (UnimplementedConciergefServer) CallTest(context.Context, *Hello) (*Hi, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallTest not implemented")
}
func (UnimplementedConciergefServer) CallSearch(context.Context, *Search) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallSearch not implemented")
}
func (UnimplementedConciergefServer) mustEmbedUnimplementedConciergefServer() {}

// UnsafeConciergefServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConciergefServer will
// result in compilation errors.
type UnsafeConciergefServer interface {
	mustEmbedUnimplementedConciergefServer()
}

func RegisterConciergefServer(s grpc.ServiceRegistrar, srv ConciergefServer) {
	s.RegisterService(&Conciergef_ServiceDesc, srv)
}

func _Conciergef_CallTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConciergefServer).CallTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Conciergef/CallTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConciergefServer).CallTest(ctx, req.(*Hello))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conciergef_CallSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConciergefServer).CallSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Conciergef/CallSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConciergefServer).CallSearch(ctx, req.(*Search))
	}
	return interceptor(ctx, in, info, handler)
}

// Conciergef_ServiceDesc is the grpc.ServiceDesc for Conciergef service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Conciergef_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Conciergef",
	HandlerType: (*ConciergefServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallTest",
			Handler:    _Conciergef_CallTest_Handler,
		},
		{
			MethodName: "CallSearch",
			Handler:    _Conciergef_CallSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conciergef.proto",
}
